/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.vcs_demo_nov27;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

 
import java.time.LocalDateTime;

/**
 * DatetimeType generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`Datetime Type`", uniqueConstraints = {
        @UniqueConstraint(name = "`UK_Datetime_Type_ID_Date1GTzm`", columnNames = {"`ID`", "`DatetimeType`"})})
public class DatetimeType implements Serializable {

    private Integer id;
     
    private LocalDateTime datetimeType;
    private String column3;

    @Id
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`DatetimeType`", nullable = true)
    public LocalDateTime getDatetimeType() {
        return this.datetimeType;
    }

    public void setDatetimeType(LocalDateTime datetimeType) {
        this.datetimeType = datetimeType;
    }

    @Column(name = "`COLUMN3`", nullable = true, length = 255)
    public String getColumn3() {
        return this.column3;
    }

    public void setColumn3(String column3) {
        this.column3 = column3;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DatetimeType)) return false;
        final DatetimeType datetimeTypeInstance = (DatetimeType) o;
        return Objects.equals(getId(), datetimeTypeInstance.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}

