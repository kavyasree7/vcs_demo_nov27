/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.vcs_demo_nov27.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import java.time.LocalDateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.vcs_demo_nov27.DatetimeType;
import com.vcs_demo_nov27.service.DatetimeTypeService;


/**
 * Controller object for domain model class DatetimeType.
 * @see DatetimeType
 */
@RestController("viewsdb.DatetimeTypeController")
@Api(value = "DatetimeTypeController", description = "Exposes APIs to work with DatetimeType resource.")
@RequestMapping("/viewsdb/DatetimeType")
public class DatetimeTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DatetimeTypeController.class);

    @Autowired
	@Qualifier("viewsdb.DatetimeTypeService")
	private DatetimeTypeService datetimeTypeService;

	@ApiOperation(value = "Creates a new DatetimeType instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public DatetimeType createDatetimeType(@RequestBody DatetimeType datetimeTypeInstance) {
		LOGGER.debug("Create DatetimeType with information: {}" , datetimeTypeInstance);

		datetimeTypeInstance = datetimeTypeService.create(datetimeTypeInstance);
		LOGGER.debug("Created DatetimeType with information: {}" , datetimeTypeInstance);

	    return datetimeTypeInstance;
	}

    @ApiOperation(value = "Returns the DatetimeType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DatetimeType getDatetimeType(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting DatetimeType with id: {}" , id);

        DatetimeType foundDatetimeType = datetimeTypeService.getById(id);
        LOGGER.debug("DatetimeType details with id: {}" , foundDatetimeType);

        return foundDatetimeType;
    }

    @ApiOperation(value = "Updates the DatetimeType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DatetimeType editDatetimeType(@PathVariable("id") Integer id, @RequestBody DatetimeType datetimeTypeInstance) throws EntityNotFoundException {
        LOGGER.debug("Editing DatetimeType with id: {}" , datetimeTypeInstance.getId());

        datetimeTypeInstance.setId(id);
        datetimeTypeInstance = datetimeTypeService.update(datetimeTypeInstance);
        LOGGER.debug("DatetimeType details with id: {}" , datetimeTypeInstance);

        return datetimeTypeInstance;
    }

    @ApiOperation(value = "Deletes the DatetimeType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDatetimeType(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DatetimeType with id: {}" , id);

        DatetimeType deletedDatetimeType = datetimeTypeService.delete(id);

        return deletedDatetimeType != null;
    }

    @RequestMapping(value = "/id-datetimeType", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching DatetimeType with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DatetimeType getByIdAndDatetimeType(@RequestParam("id") int id, @RequestParam("datetimeType") LocalDateTime datetimeType) {
        LOGGER.debug("Getting DatetimeType with uniques key IdAndDatetimeType");
        return datetimeTypeService.getByIdAndDatetimeType(id, datetimeType);
    }

    /**
     * @deprecated Use {@link #findDatetimeTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of DatetimeType instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DatetimeType> searchDatetimeTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DatetimeTypes list");
        return datetimeTypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DatetimeType instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DatetimeType> findDatetimeTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DatetimeTypes list");
        return datetimeTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DatetimeType instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DatetimeType> filterDatetimeTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DatetimeTypes list");
        return datetimeTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportDatetimeTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return datetimeTypeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of DatetimeType instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countDatetimeTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting DatetimeTypes");
		return datetimeTypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getDatetimeTypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return datetimeTypeService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DatetimeTypeService instance
	 */
	protected void setDatetimeTypeService(DatetimeTypeService service) {
		this.datetimeTypeService = service;
	}

}

