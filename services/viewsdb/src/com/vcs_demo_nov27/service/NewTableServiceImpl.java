/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.vcs_demo_nov27.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.vcs_demo_nov27.NewTable;


/**
 * ServiceImpl object for domain model class NewTable.
 *
 * @see NewTable
 */
@Service("viewsdb.NewTableService")
@Validated
public class NewTableServiceImpl implements NewTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(NewTableServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.NewTableDao")
    private WMGenericDao<NewTable, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<NewTable, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public NewTable create(NewTable newTable) {
        LOGGER.debug("Creating a new NewTable with information: {}", newTable);
        NewTable newTableCreated = this.wmGenericDao.create(newTable);
        return newTableCreated;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public NewTable getById(Integer newtableId) throws EntityNotFoundException {
        LOGGER.debug("Finding NewTable by id: {}", newtableId);
        NewTable newTable = this.wmGenericDao.findById(newtableId);
        if (newTable == null){
            LOGGER.debug("No NewTable found with id: {}", newtableId);
            throw new EntityNotFoundException(String.valueOf(newtableId));
        }
        return newTable;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public NewTable findById(Integer newtableId) {
        LOGGER.debug("Finding NewTable by id: {}", newtableId);
        return this.wmGenericDao.findById(newtableId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public NewTable update(NewTable newTable) throws EntityNotFoundException {
        LOGGER.debug("Updating NewTable with information: {}", newTable);
        this.wmGenericDao.update(newTable);

        Integer newtableId = newTable.getId();

        return this.wmGenericDao.findById(newtableId);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public NewTable delete(Integer newtableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting NewTable with id: {}", newtableId);
        NewTable deleted = this.wmGenericDao.findById(newtableId);
        if (deleted == null) {
            LOGGER.debug("No NewTable found with id: {}", newtableId);
            throw new EntityNotFoundException(String.valueOf(newtableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<NewTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all NewTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<NewTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all NewTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table NewTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

