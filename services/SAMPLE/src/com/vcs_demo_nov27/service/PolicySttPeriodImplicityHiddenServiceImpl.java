/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.vcs_demo_nov27.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.annotations.TableTemporal;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.periods.PeriodClause;
import com.wavemaker.runtime.data.periods.PeriodClauseWrapper;
import com.wavemaker.runtime.file.model.Downloadable;

import com.vcs_demo_nov27.PolicySttPeriodImplicityHidden;
import com.vcs_demo_nov27.PolicySttPeriodImplicityHiddenId;


/**
 * ServiceImpl object for domain model class PolicySttPeriodImplicityHidden.
 *
 * @see PolicySttPeriodImplicityHidden
 */
@Service("SAMPLE.PolicySttPeriodImplicityHiddenService")
@Validated
public class PolicySttPeriodImplicityHiddenServiceImpl implements PolicySttPeriodImplicityHiddenService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PolicySttPeriodImplicityHiddenServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.PolicySttPeriodImplicityHiddenDao")
    private WMGenericDao<PolicySttPeriodImplicityHidden, PolicySttPeriodImplicityHiddenId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PolicySttPeriodImplicityHidden, PolicySttPeriodImplicityHiddenId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public PolicySttPeriodImplicityHidden create(PolicySttPeriodImplicityHidden policySttPeriodImplicityHidden) {
        LOGGER.debug("Creating a new PolicySttPeriodImplicityHidden with information: {}", policySttPeriodImplicityHidden);
        PolicySttPeriodImplicityHidden policySttPeriodImplicityHiddenCreated = this.wmGenericDao.create(policySttPeriodImplicityHidden);
        return policySttPeriodImplicityHiddenCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public PolicySttPeriodImplicityHidden getById(PolicySttPeriodImplicityHiddenId policysttperiodimplicityhiddenId) throws EntityNotFoundException {
        LOGGER.debug("Finding PolicySttPeriodImplicityHidden by id: {}", policysttperiodimplicityhiddenId);
        PolicySttPeriodImplicityHidden policySttPeriodImplicityHidden = this.wmGenericDao.findById(policysttperiodimplicityhiddenId);
        if (policySttPeriodImplicityHidden == null){
            LOGGER.debug("No PolicySttPeriodImplicityHidden found with id: {}", policysttperiodimplicityhiddenId);
            throw new EntityNotFoundException(String.valueOf(policysttperiodimplicityhiddenId));
        }
        return policySttPeriodImplicityHidden;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public PolicySttPeriodImplicityHidden findById(PolicySttPeriodImplicityHiddenId policysttperiodimplicityhiddenId) {
        LOGGER.debug("Finding PolicySttPeriodImplicityHidden by id: {}", policysttperiodimplicityhiddenId);
        return this.wmGenericDao.findById(policysttperiodimplicityhiddenId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public PolicySttPeriodImplicityHidden update(PolicySttPeriodImplicityHidden policySttPeriodImplicityHidden) throws EntityNotFoundException {
        LOGGER.debug("Updating PolicySttPeriodImplicityHidden with information: {}", policySttPeriodImplicityHidden);
        this.wmGenericDao.update(policySttPeriodImplicityHidden);

        PolicySttPeriodImplicityHiddenId policysttperiodimplicityhiddenId = new PolicySttPeriodImplicityHiddenId();
        policysttperiodimplicityhiddenId.setPolicyId(policySttPeriodImplicityHidden.getPolicyId());
        policysttperiodimplicityhiddenId.setCoverage(policySttPeriodImplicityHidden.getCoverage());
        policysttperiodimplicityhiddenId.setSysStart(policySttPeriodImplicityHidden.getSysStart());
        policysttperiodimplicityhiddenId.setSysEnd(policySttPeriodImplicityHidden.getSysEnd());
        policysttperiodimplicityhiddenId.setTsId(policySttPeriodImplicityHidden.getTsId());

        return this.wmGenericDao.findById(policysttperiodimplicityhiddenId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public PolicySttPeriodImplicityHidden delete(PolicySttPeriodImplicityHiddenId policysttperiodimplicityhiddenId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PolicySttPeriodImplicityHidden with id: {}", policysttperiodimplicityhiddenId);
        PolicySttPeriodImplicityHidden deleted = this.wmGenericDao.findById(policysttperiodimplicityhiddenId);
        if (deleted == null) {
            LOGGER.debug("No PolicySttPeriodImplicityHidden found with id: {}", policysttperiodimplicityhiddenId);
            throw new EntityNotFoundException(String.valueOf(policysttperiodimplicityhiddenId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<PolicySttPeriodImplicityHidden> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PolicySttPeriodImplicityHiddens");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<PolicySttPeriodImplicityHidden> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PolicySttPeriodImplicityHiddens");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<PolicySttPeriodImplicityHidden> findHistory(String systemClause, String query, Pageable pageable) {
        List<PeriodClause> periodClauses = new ArrayList<>(2);
        if(systemClause != null && !systemClause.isEmpty()) {
            periodClauses.add(new PeriodClauseWrapper(TableTemporal.TemporalType.SYSTEM, systemClause));
        }
        return findHistory(periodClauses, query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<PolicySttPeriodImplicityHidden> findHistory(List<PeriodClause> periodClauses, String query, Pageable pageable) {
        LOGGER.debug("Finding history data for PolicySttPeriodImplicityHidden");
        return this.wmGenericDao.findHistory(periodClauses, query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table PolicySttPeriodImplicityHidden to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

