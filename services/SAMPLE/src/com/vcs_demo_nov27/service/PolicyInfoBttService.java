/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.vcs_demo_nov27.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.periods.PeriodClause;
import com.wavemaker.runtime.file.model.Downloadable;

import com.vcs_demo_nov27.PolicyInfoBtt;
import com.vcs_demo_nov27.PolicyInfoBttId;

/**
 * Service object for domain model class {@link PolicyInfoBtt}.
 */
public interface PolicyInfoBttService {

    /**
     * Creates a new PolicyInfoBtt. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PolicyInfoBtt if any.
     *
     * @param policyInfoBtt Details of the PolicyInfoBtt to be created; value cannot be null.
     * @return The newly created PolicyInfoBtt.
     */
	PolicyInfoBtt create(@Valid PolicyInfoBtt policyInfoBtt);


	/**
	 * Returns PolicyInfoBtt by given id if exists.
	 *
	 * @param policyinfobttId The id of the PolicyInfoBtt to get; value cannot be null.
	 * @return PolicyInfoBtt associated with the given policyinfobttId.
     * @throws EntityNotFoundException If no PolicyInfoBtt is found.
	 */
	PolicyInfoBtt getById(PolicyInfoBttId policyinfobttId) throws EntityNotFoundException;

    /**
	 * Find and return the PolicyInfoBtt by given id if exists, returns null otherwise.
	 *
	 * @param policyinfobttId The id of the PolicyInfoBtt to get; value cannot be null.
	 * @return PolicyInfoBtt associated with the given policyinfobttId.
	 */
	PolicyInfoBtt findById(PolicyInfoBttId policyinfobttId);


	/**
	 * Updates the details of an existing PolicyInfoBtt. It replaces all fields of the existing PolicyInfoBtt with the given policyInfoBtt.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on PolicyInfoBtt if any.
     *
	 * @param policyInfoBtt The details of the PolicyInfoBtt to be updated; value cannot be null.
	 * @return The updated PolicyInfoBtt.
	 * @throws EntityNotFoundException if no PolicyInfoBtt is found with given input.
	 */
	PolicyInfoBtt update(@Valid PolicyInfoBtt policyInfoBtt) throws EntityNotFoundException;

    /**
	 * Deletes an existing PolicyInfoBtt with the given id.
	 *
	 * @param policyinfobttId The id of the PolicyInfoBtt to be deleted; value cannot be null.
	 * @return The deleted PolicyInfoBtt.
	 * @throws EntityNotFoundException if no PolicyInfoBtt found with the given id.
	 */
	PolicyInfoBtt delete(PolicyInfoBttId policyinfobttId) throws EntityNotFoundException;

	/**
	 * Find all PolicyInfoBtts matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PolicyInfoBtts.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<PolicyInfoBtt> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all PolicyInfoBtts matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PolicyInfoBtts.
     *
     * @see Pageable
     * @see Page
	 */
    Page<PolicyInfoBtt> findAll(String query, Pageable pageable);

    /**
	 * Find all PolicyInfoBtts's history matching the given period clauses and query. This method returns
     * Paginated results.
     * Note: Go through the documentation for <u>periodClause</u> and <u>query</u> syntax.
	 *
     * @param applicationClause The period clause condition.
     * @param systemClause The period clause condition.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PolicyInfoBtts.
     *
     * @see Pageable
     * @see Page
	 */
    Page<PolicyInfoBtt> findHistory(String applicationClause, String systemClause, String query, Pageable pageable);

    /**
	 * Find all PolicyInfoBtts's history matching the given period clauses and query. This method returns
     * Paginated results.
     * Note: Go through the documentation for <u>periodClause</u> and <u>query</u> syntax.
	 *
     * @param periodClauses The clauses to filter history.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PolicyInfoBtts.
     *
     * @see Pageable
     * @see Page
	 */
    Page<PolicyInfoBtt> findHistory(List<PeriodClause> periodClauses, String query, Pageable pageable);

    /**
	 * Exports all PolicyInfoBtts matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the PolicyInfoBtts in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the PolicyInfoBtt.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

