/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.vcs_demo_nov27.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.vcs_demo_nov27.Alltypes;

/**
 * Service object for domain model class {@link Alltypes}.
 */
public interface AlltypesService {

    /**
     * Creates a new Alltypes. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Alltypes if any.
     *
     * @param alltypes Details of the Alltypes to be created; value cannot be null.
     * @return The newly created Alltypes.
     */
	Alltypes create(@Valid Alltypes alltypes);


	/**
	 * Returns Alltypes by given id if exists.
	 *
	 * @param alltypesId The id of the Alltypes to get; value cannot be null.
	 * @return Alltypes associated with the given alltypesId.
     * @throws EntityNotFoundException If no Alltypes is found.
	 */
	Alltypes getById(Integer alltypesId) throws EntityNotFoundException;

    /**
	 * Find and return the Alltypes by given id if exists, returns null otherwise.
	 *
	 * @param alltypesId The id of the Alltypes to get; value cannot be null.
	 * @return Alltypes associated with the given alltypesId.
	 */
	Alltypes findById(Integer alltypesId);


	/**
	 * Updates the details of an existing Alltypes. It replaces all fields of the existing Alltypes with the given alltypes.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Alltypes if any.
     *
	 * @param alltypes The details of the Alltypes to be updated; value cannot be null.
	 * @return The updated Alltypes.
	 * @throws EntityNotFoundException if no Alltypes is found with given input.
	 */
	Alltypes update(@Valid Alltypes alltypes) throws EntityNotFoundException;

    /**
	 * Deletes an existing Alltypes with the given id.
	 *
	 * @param alltypesId The id of the Alltypes to be deleted; value cannot be null.
	 * @return The deleted Alltypes.
	 * @throws EntityNotFoundException if no Alltypes found with the given id.
	 */
	Alltypes delete(Integer alltypesId) throws EntityNotFoundException;

	/**
	 * Find all Alltypes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Alltypes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Alltypes> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Alltypes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Alltypes.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Alltypes> findAll(String query, Pageable pageable);

    /**
	 * Exports all Alltypes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Alltypes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Alltypes.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

