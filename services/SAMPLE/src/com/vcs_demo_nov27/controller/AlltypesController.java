/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.vcs_demo_nov27.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.vcs_demo_nov27.Alltypes;
import com.vcs_demo_nov27.service.AlltypesService;


/**
 * Controller object for domain model class Alltypes.
 * @see Alltypes
 */
@RestController("SAMPLE.AlltypesController")
@Api(value = "AlltypesController", description = "Exposes APIs to work with Alltypes resource.")
@RequestMapping("/SAMPLE/Alltypes")
public class AlltypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AlltypesController.class);

    @Autowired
	@Qualifier("SAMPLE.AlltypesService")
	private AlltypesService alltypesService;

	@ApiOperation(value = "Creates a new Alltypes instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Alltypes createAlltypes(@RequestPart("wm_data_json") Alltypes alltypes, @RequestPart(value = "blobcol", required = false) MultipartFile _blobcol) {
		LOGGER.debug("Create Alltypes with information: {}" , alltypes);

    alltypes.setBlobcol(WMMultipartUtils.toByteArray(_blobcol));
		alltypes = alltypesService.create(alltypes);
		LOGGER.debug("Created Alltypes with information: {}" , alltypes);

	    return alltypes;
	}

    @ApiOperation(value = "Returns the Alltypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Alltypes getAlltypes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Alltypes with id: {}" , id);

        Alltypes foundAlltypes = alltypesService.getById(id);
        LOGGER.debug("Alltypes details with id: {}" , foundAlltypes);

        return foundAlltypes;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in Alltypes instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getAlltypesBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in Alltypes instance" , fieldName);

        if(!WMRuntimeUtils.isLob(Alltypes.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        Alltypes alltypes = alltypesService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(alltypes, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the Alltypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Alltypes editAlltypes(@PathVariable("id") Integer id, @RequestBody Alltypes alltypes) throws EntityNotFoundException {
        LOGGER.debug("Editing Alltypes with id: {}" , alltypes.getPkid());

        alltypes.setPkid(id);
        alltypes = alltypesService.update(alltypes);
        LOGGER.debug("Alltypes details with id: {}" , alltypes);

        return alltypes;
    }

    @ApiOperation(value = "Updates the Alltypes instance associated with the given id.This API should be used when Alltypes instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Alltypes editAlltypes(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        Alltypes newAlltypes = WMMultipartUtils.toObject(multipartHttpServletRequest, Alltypes.class, "SAMPLE");
        newAlltypes.setPkid(id);

        Alltypes oldAlltypes = alltypesService.getById(id);
        WMMultipartUtils.updateLobsContent(oldAlltypes, newAlltypes);
        LOGGER.debug("Updating Alltypes with information: {}" , newAlltypes);

        return alltypesService.update(newAlltypes);
    }

    @ApiOperation(value = "Deletes the Alltypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAlltypes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Alltypes with id: {}" , id);

        Alltypes deletedAlltypes = alltypesService.delete(id);

        return deletedAlltypes != null;
    }

    /**
     * @deprecated Use {@link #findAlltypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Alltypes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Alltypes> searchAlltypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Alltypes list");
        return alltypesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Alltypes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Alltypes> findAlltypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Alltypes list");
        return alltypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Alltypes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Alltypes> filterAlltypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Alltypes list");
        return alltypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAlltypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return alltypesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Alltypes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAlltypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Alltypes");
		return alltypesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAlltypesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return alltypesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AlltypesService instance
	 */
	protected void setAlltypesService(AlltypesService service) {
		this.alltypesService = service;
	}

}

