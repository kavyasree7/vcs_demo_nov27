/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.vcs_demo_nov27.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.sql.Date;
import java.sql.Timestamp;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.vcs_demo_nov27.PolicyInfoBtt;
import com.vcs_demo_nov27.PolicyInfoBttId;
import com.vcs_demo_nov27.service.PolicyInfoBttService;


/**
 * Controller object for domain model class PolicyInfoBtt.
 * @see PolicyInfoBtt
 */
@RestController("SAMPLE.PolicyInfoBttController")
@Api(value = "PolicyInfoBttController", description = "Exposes APIs to work with PolicyInfoBtt resource.")
@RequestMapping("/SAMPLE/PolicyInfoBtt")
public class PolicyInfoBttController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PolicyInfoBttController.class);

    @Autowired
	@Qualifier("SAMPLE.PolicyInfoBttService")
	private PolicyInfoBttService policyInfoBttService;

	@ApiOperation(value = "Creates a new PolicyInfoBtt instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PolicyInfoBtt createPolicyInfoBtt(@RequestBody PolicyInfoBtt policyInfoBtt) {
		LOGGER.debug("Create PolicyInfoBtt with information: {}" , policyInfoBtt);

		policyInfoBtt = policyInfoBttService.create(policyInfoBtt);
		LOGGER.debug("Created PolicyInfoBtt with information: {}" , policyInfoBtt);

	    return policyInfoBtt;
	}

@ApiOperation(value = "Returns the PolicyInfoBtt instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PolicyInfoBtt getPolicyInfoBtt(@RequestParam("policyId") String policyId,@RequestParam("coverage") Integer coverage,@RequestParam("busStart") Date busStart,@RequestParam("busEnd") Date busEnd,@RequestParam("sysStart") Timestamp sysStart,@RequestParam("sysEnd") Timestamp sysEnd,@RequestParam("tsId") Timestamp tsId) throws EntityNotFoundException {

        PolicyInfoBttId policyinfobttId = new PolicyInfoBttId();
        policyinfobttId.setPolicyId(policyId);
        policyinfobttId.setCoverage(coverage);
        policyinfobttId.setBusStart(busStart);
        policyinfobttId.setBusEnd(busEnd);
        policyinfobttId.setSysStart(sysStart);
        policyinfobttId.setSysEnd(sysEnd);
        policyinfobttId.setTsId(tsId);

        LOGGER.debug("Getting PolicyInfoBtt with id: {}" , policyinfobttId);
        PolicyInfoBtt policyInfoBtt = policyInfoBttService.getById(policyinfobttId);
        LOGGER.debug("PolicyInfoBtt details with id: {}" , policyInfoBtt);

        return policyInfoBtt;
    }



    @ApiOperation(value = "Updates the PolicyInfoBtt instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PolicyInfoBtt editPolicyInfoBtt(@RequestParam("policyId") String policyId,@RequestParam("coverage") Integer coverage,@RequestParam("busStart") Date busStart,@RequestParam("busEnd") Date busEnd,@RequestParam("sysStart") Timestamp sysStart,@RequestParam("sysEnd") Timestamp sysEnd,@RequestParam("tsId") Timestamp tsId, @RequestBody PolicyInfoBtt policyInfoBtt) throws EntityNotFoundException {

        policyInfoBtt.setPolicyId(policyId);
        policyInfoBtt.setCoverage(coverage);
        policyInfoBtt.setBusStart(busStart);
        policyInfoBtt.setBusEnd(busEnd);
        policyInfoBtt.setSysStart(sysStart);
        policyInfoBtt.setSysEnd(sysEnd);
        policyInfoBtt.setTsId(tsId);

        LOGGER.debug("PolicyInfoBtt details with id is updated with: {}" , policyInfoBtt);

        return policyInfoBttService.update(policyInfoBtt);
    }


    @ApiOperation(value = "Deletes the PolicyInfoBtt instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePolicyInfoBtt(@RequestParam("policyId") String policyId,@RequestParam("coverage") Integer coverage,@RequestParam("busStart") Date busStart,@RequestParam("busEnd") Date busEnd,@RequestParam("sysStart") Timestamp sysStart,@RequestParam("sysEnd") Timestamp sysEnd,@RequestParam("tsId") Timestamp tsId) throws EntityNotFoundException {

        PolicyInfoBttId policyinfobttId = new PolicyInfoBttId();
        policyinfobttId.setPolicyId(policyId);
        policyinfobttId.setCoverage(coverage);
        policyinfobttId.setBusStart(busStart);
        policyinfobttId.setBusEnd(busEnd);
        policyinfobttId.setSysStart(sysStart);
        policyinfobttId.setSysEnd(sysEnd);
        policyinfobttId.setTsId(tsId);

        LOGGER.debug("Deleting PolicyInfoBtt with id: {}" , policyinfobttId);
        PolicyInfoBtt policyInfoBtt = policyInfoBttService.delete(policyinfobttId);

        return policyInfoBtt != null;
    }


    /**
     * @deprecated Use {@link #findPolicyInfoBtts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PolicyInfoBtt instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicyInfoBtt> searchPolicyInfoBttsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PolicyInfoBtts list");
        return policyInfoBttService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PolicyInfoBtt instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicyInfoBtt> findPolicyInfoBtts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PolicyInfoBtts list");
        return policyInfoBttService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PolicyInfoBtt instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicyInfoBtt> filterPolicyInfoBtts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PolicyInfoBtts list");
        return policyInfoBttService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated history of PolicyInfoBtt instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(value = "/history", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicyInfoBtt> findPolicyInfoBttsHistory(@ApiParam("application period clause to filter the history data.")@RequestParam(value = "applicationClause", required = false) String applicationClause, @ApiParam("system period clause to filter the history data.")@RequestParam(value = "systemClause", required = false) String systemClause, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PolicyInfoBtts history list");
        return policyInfoBttService.findHistory(applicationClause, systemClause, query, pageable);
    }

    @ApiOperation(value = "Returns the paginated history of PolicyInfoBtt instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/history", method = RequestMethod.POST, consumes = "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicyInfoBtt> filterPolicyInfoBttsHistory(@ApiParam("application period clause to filter the history data.")@RequestParam(value = "applicationClause", required = false) String applicationClause, @ApiParam("system period clause to filter the history data.")@RequestParam(value = "systemClause", required = false) String systemClause, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PolicyInfoBtts history list");
        return policyInfoBttService.findHistory(applicationClause, systemClause, query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPolicyInfoBtts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return policyInfoBttService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of PolicyInfoBtt instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPolicyInfoBtts( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PolicyInfoBtts");
		return policyInfoBttService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPolicyInfoBttAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return policyInfoBttService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PolicyInfoBttService instance
	 */
	protected void setPolicyInfoBttService(PolicyInfoBttService service) {
		this.policyInfoBttService = service;
	}

}

