/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.vcs_demo_nov27.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.sql.Timestamp;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.vcs_demo_nov27.PolicySttPeriodImplicityHidden;
import com.vcs_demo_nov27.PolicySttPeriodImplicityHiddenId;
import com.vcs_demo_nov27.service.PolicySttPeriodImplicityHiddenService;


/**
 * Controller object for domain model class PolicySttPeriodImplicityHidden.
 * @see PolicySttPeriodImplicityHidden
 */
@RestController("SAMPLE.PolicySttPeriodImplicityHiddenController")
@Api(value = "PolicySttPeriodImplicityHiddenController", description = "Exposes APIs to work with PolicySttPeriodImplicityHidden resource.")
@RequestMapping("/SAMPLE/PolicySttPeriodImplicityHidden")
public class PolicySttPeriodImplicityHiddenController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PolicySttPeriodImplicityHiddenController.class);

    @Autowired
	@Qualifier("SAMPLE.PolicySttPeriodImplicityHiddenService")
	private PolicySttPeriodImplicityHiddenService policySttPeriodImplicityHiddenService;

	@ApiOperation(value = "Creates a new PolicySttPeriodImplicityHidden instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PolicySttPeriodImplicityHidden createPolicySttPeriodImplicityHidden(@RequestBody PolicySttPeriodImplicityHidden policySttPeriodImplicityHidden) {
		LOGGER.debug("Create PolicySttPeriodImplicityHidden with information: {}" , policySttPeriodImplicityHidden);

		policySttPeriodImplicityHidden = policySttPeriodImplicityHiddenService.create(policySttPeriodImplicityHidden);
		LOGGER.debug("Created PolicySttPeriodImplicityHidden with information: {}" , policySttPeriodImplicityHidden);

	    return policySttPeriodImplicityHidden;
	}

@ApiOperation(value = "Returns the PolicySttPeriodImplicityHidden instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PolicySttPeriodImplicityHidden getPolicySttPeriodImplicityHidden(@RequestParam("policyId") String policyId,@RequestParam("coverage") Integer coverage,@RequestParam("sysStart") Timestamp sysStart,@RequestParam("sysEnd") Timestamp sysEnd,@RequestParam("tsId") Timestamp tsId) throws EntityNotFoundException {

        PolicySttPeriodImplicityHiddenId policysttperiodimplicityhiddenId = new PolicySttPeriodImplicityHiddenId();
        policysttperiodimplicityhiddenId.setPolicyId(policyId);
        policysttperiodimplicityhiddenId.setCoverage(coverage);
        policysttperiodimplicityhiddenId.setSysStart(sysStart);
        policysttperiodimplicityhiddenId.setSysEnd(sysEnd);
        policysttperiodimplicityhiddenId.setTsId(tsId);

        LOGGER.debug("Getting PolicySttPeriodImplicityHidden with id: {}" , policysttperiodimplicityhiddenId);
        PolicySttPeriodImplicityHidden policySttPeriodImplicityHidden = policySttPeriodImplicityHiddenService.getById(policysttperiodimplicityhiddenId);
        LOGGER.debug("PolicySttPeriodImplicityHidden details with id: {}" , policySttPeriodImplicityHidden);

        return policySttPeriodImplicityHidden;
    }



    @ApiOperation(value = "Updates the PolicySttPeriodImplicityHidden instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PolicySttPeriodImplicityHidden editPolicySttPeriodImplicityHidden(@RequestParam("policyId") String policyId,@RequestParam("coverage") Integer coverage,@RequestParam("sysStart") Timestamp sysStart,@RequestParam("sysEnd") Timestamp sysEnd,@RequestParam("tsId") Timestamp tsId, @RequestBody PolicySttPeriodImplicityHidden policySttPeriodImplicityHidden) throws EntityNotFoundException {

        policySttPeriodImplicityHidden.setPolicyId(policyId);
        policySttPeriodImplicityHidden.setCoverage(coverage);
        policySttPeriodImplicityHidden.setSysStart(sysStart);
        policySttPeriodImplicityHidden.setSysEnd(sysEnd);
        policySttPeriodImplicityHidden.setTsId(tsId);

        LOGGER.debug("PolicySttPeriodImplicityHidden details with id is updated with: {}" , policySttPeriodImplicityHidden);

        return policySttPeriodImplicityHiddenService.update(policySttPeriodImplicityHidden);
    }


    @ApiOperation(value = "Deletes the PolicySttPeriodImplicityHidden instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePolicySttPeriodImplicityHidden(@RequestParam("policyId") String policyId,@RequestParam("coverage") Integer coverage,@RequestParam("sysStart") Timestamp sysStart,@RequestParam("sysEnd") Timestamp sysEnd,@RequestParam("tsId") Timestamp tsId) throws EntityNotFoundException {

        PolicySttPeriodImplicityHiddenId policysttperiodimplicityhiddenId = new PolicySttPeriodImplicityHiddenId();
        policysttperiodimplicityhiddenId.setPolicyId(policyId);
        policysttperiodimplicityhiddenId.setCoverage(coverage);
        policysttperiodimplicityhiddenId.setSysStart(sysStart);
        policysttperiodimplicityhiddenId.setSysEnd(sysEnd);
        policysttperiodimplicityhiddenId.setTsId(tsId);

        LOGGER.debug("Deleting PolicySttPeriodImplicityHidden with id: {}" , policysttperiodimplicityhiddenId);
        PolicySttPeriodImplicityHidden policySttPeriodImplicityHidden = policySttPeriodImplicityHiddenService.delete(policysttperiodimplicityhiddenId);

        return policySttPeriodImplicityHidden != null;
    }


    /**
     * @deprecated Use {@link #findPolicySttPeriodImplicityHiddens(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PolicySttPeriodImplicityHidden instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicySttPeriodImplicityHidden> searchPolicySttPeriodImplicityHiddensByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PolicySttPeriodImplicityHiddens list");
        return policySttPeriodImplicityHiddenService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PolicySttPeriodImplicityHidden instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicySttPeriodImplicityHidden> findPolicySttPeriodImplicityHiddens(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PolicySttPeriodImplicityHiddens list");
        return policySttPeriodImplicityHiddenService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PolicySttPeriodImplicityHidden instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicySttPeriodImplicityHidden> filterPolicySttPeriodImplicityHiddens(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PolicySttPeriodImplicityHiddens list");
        return policySttPeriodImplicityHiddenService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated history of PolicySttPeriodImplicityHidden instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(value = "/history", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicySttPeriodImplicityHidden> findPolicySttPeriodImplicityHiddensHistory(@ApiParam("system period clause to filter the history data.")@RequestParam(value = "systemClause", required = true) String systemClause, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PolicySttPeriodImplicityHiddens history list");
        return policySttPeriodImplicityHiddenService.findHistory(systemClause, query, pageable);
    }

    @ApiOperation(value = "Returns the paginated history of PolicySttPeriodImplicityHidden instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/history", method = RequestMethod.POST, consumes = "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicySttPeriodImplicityHidden> filterPolicySttPeriodImplicityHiddensHistory(@ApiParam("system period clause to filter the history data.")@RequestParam(value = "systemClause", required = true) String systemClause, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PolicySttPeriodImplicityHiddens history list");
        return policySttPeriodImplicityHiddenService.findHistory(systemClause, query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPolicySttPeriodImplicityHiddens(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return policySttPeriodImplicityHiddenService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of PolicySttPeriodImplicityHidden instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPolicySttPeriodImplicityHiddens( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PolicySttPeriodImplicityHiddens");
		return policySttPeriodImplicityHiddenService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPolicySttPeriodImplicityHiddenAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return policySttPeriodImplicityHiddenService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PolicySttPeriodImplicityHiddenService instance
	 */
	protected void setPolicySttPeriodImplicityHiddenService(PolicySttPeriodImplicityHiddenService service) {
		this.policySttPeriodImplicityHiddenService = service;
	}

}

